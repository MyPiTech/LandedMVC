@{
    ViewData["Title"] = "Events";
}

<div id="main" class="wrapper style1">
	<div id="notification" class="notification"></div>
	<div class="container">
		<header class="major">
			<h2>Cruddy Events</h2>
            <p>Create, Read, Update, and Delete Events (CRUD)</p>
		</header>
		<div class="row gtr-150">
			<div class="col-4 col-12-medium">

				<!-- Sidebar -->
				<section id="sidebar">
					<section>
						<h3>Event's Table</h3>
						<p>
							This is mostly the same technology and pattern as the User's table. I did stray a bit from jQuery and used some standard ES13 event handlers and the fetch API for some AJAX. I guess jQuery has reached its final days. In another decade, it will probably be as dead as Adobe Flash...
						</p>
						<p>
							All of the events here are unfiltered by the parent user. You can create, read, edit and delete events for any user.
						</p>
					</section>
				</section>

			</div>
			
			<div class="col-8 col-12-medium imp-medium">
				<!-- Content -->
				<section id="content">

					<div id="dataTableWrapper" class="row" >
						<p style="width: 100%"><a id="createBtn" href="#" class="button fit small">Create New Event</a></p>
						<table id="dataTable" style="width:100%">
							<thead>
								<tr>
									<th></th>
									<th>ID</th>
									<th>User ID</th>
									<th>Title</th>
									<th>Location</th>
									<th>Start</th>
									<th>Duration</th>
									<th>Actions</th>
								</tr>
							</thead>
							<tbody></tbody>
						</table>		
					</div>
						
					<form method="post" id="dataForm" action="">
					
						<div id="dataFormWrapper" class="row gtr-uniform gtr-50" style="display:none;">
							<div class="col-12">
								<h4 id="formHeader" class="inline">Create a new event.</h4> - <a id="labelsToggle" href="#" class="">Show Labels</a>
							</div>
							<div class="col-12">
								<label for="userInput" class="hide">*User</label>
								<input list="usersList" name="userInput" id="userInput" type="text" placeholder="*User" />
								<datalist id="usersList"></datalist>
							</div>
							<div class="col-12">
								<label for="title" class="hide">*Title (max: 40)</label>
								<input type="text" name="title" id="title" placeholder="*Title" maxlength="40" />
							</div>
							<div class="col-12">
								<label for="location" class="hide">Location (max: 40)</label>
								<input type="text" name="location" id="location" placeholder="Location" maxlength="40" />
							</div>
							<div class="col-6 col-12-xsmall">
								<label for="start">*Event Start Date & Time</label>
								<input type="datetime-local" name="start" id="start" />
							</div>
							<div class="col-6 col-12-xsmall">
								<label for="start">*Event Duration (Minutes)</label>
								<input type="number" id="duration" name="duration" min="10" max="100" step="10" />
							</div>

							<div class="col-12">
								<ul class="actions">
									<li><input id="submitBtn" type="submit" value="Submit" /></li>
									<li><a id="resetBtn" href="#" class="button fit">Reset</a></li>
									<li><a id="cancelBtn" href="#" class="button fit">Cancel</a></li>
								</ul>
							</div>
							<input type="hidden" name="userId" id="userId" value="0" />
							<input type="hidden" name="id" id="eventId" value="0" />
						</div>
					</form>
					
                    <hr />
					<section id="continue">

						<h3>Event's Table Notes</h3>
						<p>
							Some things to take note of:
							<ol>
								<li>Due to my budget of zero dollars. My database winds down when not in use. The first request will often take up to a minute to respond. It should be much faster after that. If you want better performance, improve my budget and hire me. &#128516; </li>
								<li>By using AJAX to populate the table. We allow for the rest of the page to load. Despite any delays on the table.</li>
								<li>This is a fairly simple implementation of the DataTables library. I am loading the complete record set and letting the data table handle all of the searching, pagination, etc. client-side. This can be changed to be server-side, if performance is an issue.</li>
							</ol>
						</p>
						<p>
							The heavy use of AJAX and JQuery here pretty much circumvents the whole "model" part of the model, view, controller framework. That said, the server side is almost identical to my other MVC demo. We are still binding the POST requests to a model and using the model server-side for validation and business logic.
						</p>
						<p>
							So why not use React or Angular, you ask? I'm glad you asked... lol. The answer is that there is no reason not to. Though arguably there is also no reason to use it here either. JS frameworks do bring some impressive stuff to the table. Notably, adherence to DRY with reusable components. That said, they bring bloat and complexity that is often unnecessary. Especially in simple applications like this one.
						</p>
						<p>
							I do intend to create a React/Typescript version of this same project. So I guess, in summary, I'm not using it here because it's not "needed" and because it is a completely separate tech stack. I am only trying to demonstrate a "senior" level grasp of responsive MVC with this project.
						</p>
					</section>

				</section>

			</div>

		</div>

	</div>

</div>

@section Scripts {
	<script src="https://cdn.datatables.net/2.0.1/js/dataTables.min.js"></script>
	<script src="https://cdn.datatables.net/plug-ins/2.0.0/dataRender/ellipsis.js"></script>
	<script src="https://cdn.datatables.net/responsive/3.0.0/js/dataTables.responsive.min.js"></script>
	<script src="~/js/views/events/vars/index.js"></script>
	<script src="~/js/views/events/index.js"></script>
	<script src="~/js/views/events/functions/index.js"></script>
	@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
