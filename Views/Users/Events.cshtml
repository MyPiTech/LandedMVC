@{
	ViewData["Title"] = "User Events";
	var usersTitle = $"{Model.FirstName} {Model.LastName}'s Cruddy Events";
	var uId = Model.Id;
}

<div id="main" class="wrapper style1">
	<div id="notification" class="notification"></div>
	<div class="container">
		<header class="major">
			<h2>@usersTitle</h2>
			<p>Create, Read, Update, and Delete Events (CRUD)</p>
		</header>
		<div class="row gtr-150">
			<div class="col-4 col-12-medium">

				<!-- Sidebar -->
				<section id="sidebar">
					<section>
						<h3> User Event's Table</h3>
						<p>
							This is mostly the same technology and pattern as the User's table. I did stray a bit from jQuery and used some standard ES13 event handlers and the fetch API for some AJAX. I guess jQuery has reached its final days. In another decade, it will probably be as dead as Adobe Flash...
						</p>
						<p>
							All of the events here are filtered by the parent user. You can only create, read, edit and delete events for that user. 
						</p>
					</section>
				</section>

			</div>

			<div class="col-8 col-12-medium imp-medium">
				<!-- Content -->
				<section id="content">
					<div id="dataTableWrapper" class="row">
						<p style="width: 100%"><a id="createBtn" href="#" class="button fit small">Create New Event</a></p>
						<table id="dataTable" style="width:100%">
							<thead>
								<tr>
									<th></th>
									<th>ID</th>
									<th>Title</th>
									<th>Location</th>
									<th>Start</th>
									<th>Duration</th>
									<th>Actions</th>
								</tr>
							</thead>
							<tbody></tbody>
						</table>
						<p style="width: 25%"><a id="backBtn" href="#" class="button fit small">Back</a></p>
					</div>

					<form method="post" id="dataForm" action="">
						<div id="dataFormWrapper" class="row gtr-uniform gtr-50" style="display:none;">
							<div class="col-12">
								<h4 id="formHeader" class="inline">Create a new event.</h4> - <a id="labelsToggle" href="#" class="">Show Labels</a>
							</div>
							<div class="col-12">
								<label for="userInput" class="hide">*User</label>
								<input list="usersList" name="userInput" id="userInput" type="text" placeholder="*User" disabled/>
								<datalist id="usersList"></datalist>
							</div>
							<div class="col-12">
								<label for="title" class="hide">*Title (max: 40)</label>
								<input type="text" name="title" id="title" placeholder="*Title" maxlength="40" />
							</div>
							<div class="col-12">
								<label for="location" class="hide">Location (max: 40)</label>
								<input type="text" name="location" id="location" placeholder="Location" maxlength="40" />
							</div>
							<div class="col-6 col-12-xsmall">
								<label for="start">*Event Start Date & Time</label>
								<input type="datetime-local" name="start" id="start" />
							</div>
							<div class="col-6 col-12-xsmall">
								<label for="start">*Event Duration (Minutes)</label>
								<input type="number" id="duration" name="duration" min="10" max="100" step="10" />
							</div>

							<div class="col-12">
								<ul class="actions">
									<li><input id="submitBtn" type="submit" value="Submit" /></li>
									<li><a id="resetBtn" href="#" class="button fit">Reset</a></li>
									<li><a id="cancelBtn" href="#" class="button fit">Cancel</a></li>
								</ul>
							</div>
							<input type="hidden" name="userId" id="userId" value="0" />
							<input type="hidden" name="id" id="eventId" value="0" />
						</div>
					</form>

					<hr />
					<section id="continue">

						<h3>User Event's Table Notes</h3>
						<p>
							Some things to take note of:
							<ol>
								<li>Due to my budget of zero dollars. My database winds down when not in use. The first request will often take up to a minute to respond. It should be much faster after that. If you want better performance, improve my budget and hire me. &#128516; </li>
								<li>By using AJAX to populate the table. We allow for the rest of the page to load. Despite any delays on the table.</li>
								<li>This is a fairly simple implementation of the DataTables library. I am loading the complete record set and letting the data table handle all of the searching, pagination, etc. client-side. This can be changed to be server-side, if performance is an issue.</li>
							</ol>
						</p>
					</section>

				</section>

			</div>

		</div>

	</div>

</div>

@section Scripts {
	<script src="https://cdn.datatables.net/2.0.1/js/dataTables.min.js"></script>
	<script src="https://cdn.datatables.net/plug-ins/2.0.0/dataRender/ellipsis.js"></script>
	<script src="https://cdn.datatables.net/responsive/3.0.0/js/dataTables.responsive.min.js"></script>
	<script>
		var uId = @(uId);
	</script>
	<script src="~/js/views/users/vars/events.js"></script>
	<script src="~/js/views/users/events.js"></script>
	<script src="~/js/views/users/functions/events.js"></script>
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}
}
