<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FormContactError" xml:space="preserve">
    <value>An error occurred. The email was not sent.</value>
  </data>
  <data name="FormContactMessage" xml:space="preserve">
    <value>Your Message</value>
  </data>
  <data name="FormContactName" xml:space="preserve">
    <value>Your Name</value>
  </data>
  <data name="FormContactNotify" xml:space="preserve">
    <value>Sending email...</value>
  </data>
  <data name="FormContactRequiredMessage" xml:space="preserve">
    <value>Please enter a message.</value>
  </data>
  <data name="FormContactRequiredName" xml:space="preserve">
    <value>Please enter a name.</value>
  </data>
  <data name="FormContactSend" xml:space="preserve">
    <value>Send</value>
  </data>
  <data name="FormContactSuccess" xml:space="preserve">
    <value>Email sent successfully.</value>
  </data>
  <data name="HeaderBio" xml:space="preserve">
    <value>I am self-taught.</value>
  </data>
  <data name="HeaderContact" xml:space="preserve">
    <value>Lets talk...</value>
  </data>
  <data name="HeaderSplash" xml:space="preserve">
    <value>The future has landed</value>
  </data>
  <data name="HeaderStory" xml:space="preserve">
    <value>I love riding</value>
  </data>
  <data name="HeaderTech" xml:space="preserve">
    <value>On to the fun tech stuff.</value>
  </data>
  <data name="HeaderTechAPI" xml:space="preserve">
    <value>API</value>
  </data>
  <data name="HeaderTechEvents" xml:space="preserve">
    <value>Events</value>
  </data>
  <data name="HeaderTechUsers" xml:space="preserve">
    <value>Users</value>
  </data>
  <data name="HeaderWelcome" xml:space="preserve">
    <value>Hello!</value>
  </data>
  <data name="LinkBio" xml:space="preserve">
    <value>Bio/Resume</value>
  </data>
  <data name="LogoHome" xml:space="preserve">
    <value>Landed MVC</value>
  </data>
  <data name="NavAPI" xml:space="preserve">
    <value>API Swagger UI</value>
  </data>
  <data name="NavAPIRepo" xml:space="preserve">
    <value>API Repository</value>
  </data>
  <data name="NavContactMe" xml:space="preserve">
    <value>Contact Me</value>
  </data>
  <data name="NavEvents" xml:space="preserve">
    <value>Events</value>
  </data>
  <data name="NavHome" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="NavMVC" xml:space="preserve">
    <value>MVC</value>
  </data>
  <data name="NavNext" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="NavOtherProjects" xml:space="preserve">
    <value>My Other Projects</value>
  </data>
  <data name="NavRepos" xml:space="preserve">
    <value>Repositories</value>
  </data>
  <data name="NavResume" xml:space="preserve">
    <value>Resume/Bio</value>
  </data>
  <data name="NavSimpleMVC" xml:space="preserve">
    <value>Simple MVC</value>
  </data>
  <data name="NavSimpleMVCRepo" xml:space="preserve">
    <value>Simple MVC Repository</value>
  </data>
  <data name="NavSimpleSignalR" xml:space="preserve">
    <value>Simple SignalR</value>
  </data>
  <data name="NavSimpleSignalRRepo" xml:space="preserve">
    <value>Simple SignalR Repository</value>
  </data>
  <data name="NavThisRepo" xml:space="preserve">
    <value>This Repository</value>
  </data>
  <data name="NavUsers" xml:space="preserve">
    <value>Users</value>
  </data>
  <data name="SubHeaderBio" xml:space="preserve">
    <value>"Never memorize something that you can look up." - &lt;strong&gt;Albert Einstein&lt;/strong&gt;</value>
  </data>
  <data name="SubHeaderContact" xml:space="preserve">
    <value>Send me an email the easy way. This form uses an endpoint in my API to send me an email.</value>
  </data>
  <data name="SubHeaderStory" xml:space="preserve">
    <value>Unfortunately, last year I had a severe accident.</value>
  </data>
  <data name="SubHeaderTech" xml:space="preserve">
    <value>&lt;p&gt;
	I created two tables in my database. Users and Events. They represent a common one-to-many relationship.
&lt;/p&gt;
&lt;p&gt;
	The choice to use Users and Events was completely arbitrary. They are not tied to anything functional. So feel free to add, edit, or delete them without fear.
&lt;/p&gt;</value>
  </data>
  <data name="SubHeaderTechAPI" xml:space="preserve">
    <value>Access the API directly using its Swagger UI.</value>
  </data>
  <data name="SubHeaderTechEvents" xml:space="preserve">
    <value>From here you can access all the events independently of users.</value>
  </data>
  <data name="SubHeaderTechUsers" xml:space="preserve">
    <value>In a normal one-to-many flow. Things would start here.</value>
  </data>
  <data name="SubHeaderWelcome" xml:space="preserve">
    <value>Welcome to &lt;strong&gt;Landed MVC!&lt;/strong&gt;</value>
  </data>
  <data name="TextBio" xml:space="preserve">
    <value>As an autodidact software developer, I've been on a journey that began in childhood and spans two decades of experience in enterprise web software development. My coding journey has traversed a diverse landscape, from BASIC to C#. Beyond writing code, I'm an avid reader, and gamer.</value>
  </data>
  <data name="TextSplash" xml:space="preserve">
    <value>And there are no hoverboards or flying cars.&lt;br /&gt;
Just me and Landed MVC...  &amp;#128514;</value>
  </data>
  <data name="TextStory" xml:space="preserve">
    <value>&lt;p&gt;
	I only bring this up because I have been out of work for a year. Mostly due to this accident and the time it has taken to recover.
&lt;/p&gt;
&lt;p&gt;
	This has made me a bit rusty, and that has a lot to do with why these demo projects exist. They serve as both a refresher for my memory and a means to alleviate any concerns employers may have about my abilities.
&lt;/p&gt;
&lt;p&gt;
	Well enough about me...
&lt;/p&gt;</value>
  </data>
  <data name="TextWelcome1" xml:space="preserve">
    <value>This web application was built using .NET 8 MVC and some nice (and free) responsive design work from &lt;a href="https://html5up.net/landed" target="_blank"&gt;HTML5 UP&lt;/a&gt;. It looks best on a desktop, but is completely responsive to mobile screen sizes. Most of the credit for this lies in the design, but I've added a fair amount of JS and CSS myself.</value>
  </data>
  <data name="TextWelcome2" xml:space="preserve">
    <value>It leverages a REST API for its backend, which is the same API utilized by my other demo applications. Consequently, modifications made here will seamlessly propagate to those applications, and vice versa. Embracing an API for the backend offers the flexibility to connect various frontends or implement alterations to them autonomously.</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Landed MVC</value>
  </data>
  <data name="TitleHome" xml:space="preserve">
    <value>Home</value>
  </data>
</root>